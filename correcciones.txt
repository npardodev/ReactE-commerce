1) Falta el deploy y como levantarlo si estoy enn mi pc

2) CART CONTEXT
 a) Los comentarios innecesarios fueron borrados.
 b) Repetido isInCart
 c) Lo 
 d)




3. El add no esta del todo bien, por que tiene que agregar o sino actualizar y ahi solo se ve que actualiza.

4. Los console.logs solo nos sirven a los devs, los tenes que borar y a los usuarios les mostrar carteles, mensajes, que sean bien expresivos de lo que esta pasando con la pagina. 

5. RemoveItem, no esta bien. Es un areposnabilida de este componente y la esta resolviendo otra.

La idea de cartContext es que tuiera el estado cart y ofreciera a todos los que lo quieren consuir diferentes metodos para modificar ese estado, sin usar ni exponer "setCart" o como lo llames vos.

Ademas que son metodos que se repiten a lo largo de los componentes y como te digo arriba, lo primordial es reutilizar.

6. GetTotalQuantity. Tenes un error de javascript, cuando vos usas llaves tenes que poner si o si el return. Y Lo que deberias usar aca es un reduce no un map, por que el reduce lo que hace es convertire un array en un resultado, como puede ser un array de elementos dar el costo total de ellos.



UI

Pagina principal

1. Tiene un prblema de ancho asi que revisa como estuviste otorgando los espacios

Hay un carrusel donde la primer imagen queda muy confusa respecto a la anterior, cuadno ambas estan als de ondas

Los iconos no tienen cursor:pointer y deerian

Me gusta que lo linkeaste a whatsapp

La animacion del navbar, tiene un leve detallito ni bien te acercas 

El carrito no esta alineado

ojo que lo que tenes en el nav, se pegotea cuando esta responsivo

Cuando veo todos los products, fijate que tenes las cards en diferentes niveles. Por ejemplo los cartelitos de "en stock" algunos estan mas altos que otros, eso corregilo. Toma como referencia la pagina de movistar

En los items que tenes "envio a domicilio, comprar en tienda y el de la pagina web" fijate que me da la posibilidad de hacer click pero no hace nada. Eso tambien arreglalo

El paginador, que aparezca recien cuando cargo los elementos y fijate que esta pegote al footer. 



BUG: los items, si le aumento el counter, aparece el agregar pero hago click y no veo nada. Y si tenes algo que no podes hacer nada, sacale el cursor:pointer

BUG: muevo el paginador, pero siempre muestra lo mismo. ¿Esta funcionando?

BUG: entre a "Disco SSD Nvme" y dice dos veces el precio, el mismo y tachado. Dice stock: y esta vacio el stock 

BUG: Detalle de producto, Apreto el menos y agrega, apreto el mas y resta. ¿Reutilizaste ese contador o repetiste codigo?

BUG: carrito, el contador arranque con 4, no me dejo sumar mas, reste llegue a 1 y no me dejo volver a subir. Llegue a 0 y no me movio de ahi

BUG: pude agregar de un producto que supuestamente esta agotado 4 elementos, mientras que no cumpliste con lo que pedi la consigna es que se traten los dupicados. TE dejo la imagen, deberia decir "8" pero lo repite dos veces y pone 4 en cada uno.

Error: actualice el contador del carrito pero el cartwidget sigue mostranod otra cosa, esto va contra lo que pediamos en el desafio. 

BUG: Apreto en contacto, lleno descripcion y me llena email y telefono tambien

ERROR: Apreto contacto, lleno y pongo enviar

me tira error, ver imagen



En el carrito "en stock" esta imposible de leer, demsiado chica la letra

En el checkout, pongo guardar y no avanza pero tampoco me dice que esta pasando. Pongo nombre y apreto guardar y me borra el nombre.

Pongo nombre y apellido, apreto guardar y me los borra a ambos. ¿Realmente los guarda? Por que pase directo a siguiente

BUG: en forma de pago pude seleccionar las 3 a la vez. Si selecciono uno, deberia desmarcarse el otro si es que esta apretado 

BUG:Parece que se creo la orden pero no tengo el id

Te dejo imagen tambien

BUG: antes de guardar, volvi a los medios de pago y no tenia ninguno seleccionado. Puse siguiente y me creo otra orden, o almenos eso dice y tambien tira undefined, te dejo foto

ERROR: compre y no me borro el carrito, va contra lo que se pide en el desafio



APP.JS

borra el codigo muerto

no tiene main



NAVBAR

1. onMouseLeave, fijate que tener un if es innecesario. estas poniendo una condicion y ya sea true o false hace lo mimso, para que queres entoncse una condicion ?

2. Usas mal el fragment, ya tenes el nav no necesitas el fragment, y no te olvides el header

3.No esta bien que le pongas un click a el link



FOOTER

Hay varios listados que podrias haber usado mas que h5, fijate que tienen el mismo formato asi que podrian haber sido componentes reutilizables que acepten props asi aplicas conceptos de react



COPYRIGHT

por mas chico que sea el componente sllevalo a su archivo. 

no uses {' '}, usa css o html



SOCIAL ICON BUTONS

no pongas el history sino lo usas

las imagenes es una obligacion que tengan el alt, por que es una cuestion de semantica y accesibilidad



ROUTER APP

1. Tiene un monton de codigo muerto que tenes que sacar

2. La parte de animacion deberias haberla puesto en otro componente y aplicar children que fue lo que aprendiste. 

3. routes y appPaths, metelos en un archivo de constantes de rutas



CUSTOM NOT FOUND y customCart empty

me parece muy bien como en ambas aplicaste el componente comun que hicimos en el after, esta era la idea. Aplica conceptos de react 

La pena es que usaste fragment, cuando realmente no lo necesitas. Revisa por favor la clase, donde yo explique con detalle cuando si y cuando no



HOME VIEW

Deberia ir un section mas que un fragment



HOME

Nada para decir



HOEM BANNER

El alt de las imagenes es muy importante



ITEM LIST CONTAINER

1. Un error grave es declarar estados que no vas a utilizar, por que los ponemos ya que necesitamos mostrar algo en pantalla, que va a cambiar en algun momento y queremos mostrar la misma pantlla con el valor actualizado. Vale tanto para la "variable de estado" como para la funcion que modifica esa variable

2. ese tipo de constantes,COLLECTION_NAME, llevalas a otro archivo. Para que no tengas que estar rastreando en todo el proyecto, donde fue que las dejaste

3. quantityDividePage es codigo muerto que no necesitas pero si calculas

4. Los console logs, no le sirven a los usuarios ellos necesitan una forma friendly en la pantalla para saber

5. Ojo con las dependencias del useEffect

6. Error no tenes que compararlo con un valor d euna constante, sino usa un booleano



CustomNotification 

solo que pongas las constantes en un archivo aparte



ITEM LIST

Revisa la clase de fragments por que no los aplicas bien

key, "index" es tu ultimo caso. Aca podes usar como clave unica element.id

el loading le correspnde al container



ITEM

linea 26: borralo esta inencesario

linea 22 :ese history replace, es polemico, por que haces eso?

No uses el click en la imagen, pone un link mejor para redireccionar



COUNTER 

El useEffect es innecesario. 

handlerClick es codigo muerto

cuando queres mostrar algo condicionalmente pero solo tenes un camino usa el operador &&



ITEM DETAIL CONTAINER

Esta mal usar el where para acceder a un documento de la coleccion, se usa los metodos de firebase para acedder a documentos. No el where, por ende todo lo relacionado sigue erroneo por que se arrastra

por que aca no usaste ese componente que tenias un snabkar y un alert y repetiste codigo?



ITEM DETAIL

por que aca tambien tenes un loading?



CustomSelectComponent

ojo que tenes un problema en el useEffect, colocaste mal la lista de dependencias



CustomStockChangeController 

1. ojo que onAdd y onRemove son casi iguales

2. que quisite hacer aca handlerCancelCart?

3. el return necesita un efactor, hay components que se pueden agrupar por las condiciones que tienen. Tampoco me convence mucho tanto render



CART CONTAINER

no te traigas cosas de context que no usas,

y tenes un estado que tampoco usas

E useEffect esta demas

mata el codigo muerto, usa etiquetas semanticas de html

la key deeria ser element.id



Cart

tenes un monton de codigo muerto que tiene que volar



CONTACT CONTAINER

Lo mismo, codigo muerto sin usar. Esto queda muy desprolijo, y cuando se trata de estados, influyen los conceptos.



CONTACT FORM

lleva esa validacion a una funcion, asi queda mas expresivo. 



CHECKOUT

borra el codigo muerto

lleva las constantes a un archivo. 



CONTACT FORM CONTAINER

1.el initial state fuera del componente

2.tenes estados creados que su funcion que lo modifica, esta sin usar.. entonces no necesitas un estado. 

3. por repetir nombres, puede ser

firstName:firstName,

lastName:lastName,

email:email,

phone:phone,



puede pasar

firstName,

lastName,

email,

phone,

4. Lleva los componentes a diferentes archivos, por que sino se convierte en uno muy largo y dificil de manipular y de entendert ambien

5. lleva "textFields" a una constante



NewsletterController

nada para decir



shipping form

mismos problemas de contct orm container



PAYMENT CONTAINER

tene cuidado con el key, ya esto te lo dije arriba



RDER SERVICE

lleva la logica de negocio a otro componente y separa de la logica de visualizacion

usaste un useEFfect, con un timeout que nunca mataste y eso es un error. 

linea 67 a 71, la repetiste en otro cde los componentes, llevala a un componente comun



CHECKOUT.JS

crea archivo para cada componente

Y aca no va el main

el return de checkout() esta muy complicado, limpia un poco el codigo para que se entienda mejor ue esta haciendo. 



checkout stepper

arregla el key



ORDER COMPONENT CONTEXT

Esto necesita un refactor. El tema de los estados, esta muy grave. Un moton de codigo muerto tambien

04/08 22:14
Carolina
La entrega obtiene una nota de 6.
04/08 22:14
Carolina
Se revierte el estado aprobado.
04/08 22:14
Federico
La entrega paso a estar desbloqueada hasta el 22/08/2021 09:33hs.
20/08 09:33
Federico
Le falta librerías al readme
No está el gif.

Funcionamiento:

no se puede ver el funcionamiento
Código:

Tiene códigos comentados qué no eliminó
No se puede terminar de corregir da error de entrada





20/08 09:33
Federico
La entrega obtiene una nota de 5.
20/08 09:33
Federico
Se revierte el estado aprobado.
20/08 09:33